//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ACTransit.DataAccess.Scheduling
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using ACTransit.Entities.Scheduling;
    
    public partial class SchedulingEntities : DbContext
    {
        public SchedulingEntities()
            : base("name=SchedulingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Block> Blocks { get; set; }
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<Place> Places { get; set; }
        public virtual DbSet<Route> Routes { get; set; }
        public virtual DbSet<RouteList> RouteLists { get; set; }
        public virtual DbSet<RouteType> RouteTypes { get; set; }
        public virtual DbSet<Stop> Stops { get; set; }
        public virtual DbSet<Trip> Trips { get; set; }
        public virtual DbSet<TripPattern> TripPatterns { get; set; }
        public virtual DbSet<TripStop> TripStops { get; set; }
        public virtual DbSet<TripTimingPoint> TripTimingPoints { get; set; }
        public virtual DbSet<StopDistrict> StopDistricts { get; set; }
        public virtual DbSet<VehicleDisplayCode> VehicleDisplayCodes { get; set; }
    
        public virtual ObjectResult<NearestStop_Result> NearestStop(Nullable<decimal> lat, Nullable<decimal> @long, Nullable<int> top, Nullable<bool> isPublic, Nullable<bool> allowAlighting, Nullable<bool> allowBoarding, string corner, Nullable<bool> isBart, Nullable<bool> isTransitCenter, Nullable<bool> isInService, Nullable<bool> isGPSValidated, Nullable<bool> avaStatus)
        {
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(decimal));
    
            var longParameter = @long.HasValue ?
                new ObjectParameter("Long", @long) :
                new ObjectParameter("Long", typeof(decimal));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("Top", top) :
                new ObjectParameter("Top", typeof(int));
    
            var isPublicParameter = isPublic.HasValue ?
                new ObjectParameter("IsPublic", isPublic) :
                new ObjectParameter("IsPublic", typeof(bool));
    
            var allowAlightingParameter = allowAlighting.HasValue ?
                new ObjectParameter("AllowAlighting", allowAlighting) :
                new ObjectParameter("AllowAlighting", typeof(bool));
    
            var allowBoardingParameter = allowBoarding.HasValue ?
                new ObjectParameter("AllowBoarding", allowBoarding) :
                new ObjectParameter("AllowBoarding", typeof(bool));
    
            var cornerParameter = corner != null ?
                new ObjectParameter("Corner", corner) :
                new ObjectParameter("Corner", typeof(string));
    
            var isBartParameter = isBart.HasValue ?
                new ObjectParameter("IsBart", isBart) :
                new ObjectParameter("IsBart", typeof(bool));
    
            var isTransitCenterParameter = isTransitCenter.HasValue ?
                new ObjectParameter("IsTransitCenter", isTransitCenter) :
                new ObjectParameter("IsTransitCenter", typeof(bool));
    
            var isInServiceParameter = isInService.HasValue ?
                new ObjectParameter("IsInService", isInService) :
                new ObjectParameter("IsInService", typeof(bool));
    
            var isGPSValidatedParameter = isGPSValidated.HasValue ?
                new ObjectParameter("IsGPSValidated", isGPSValidated) :
                new ObjectParameter("IsGPSValidated", typeof(bool));
    
            var avaStatusParameter = avaStatus.HasValue ?
                new ObjectParameter("AvaStatus", avaStatus) :
                new ObjectParameter("AvaStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NearestStop_Result>("NearestStop", latParameter, longParameter, topParameter, isPublicParameter, allowAlightingParameter, allowBoardingParameter, cornerParameter, isBartParameter, isTransitCenterParameter, isInServiceParameter, isGPSValidatedParameter, avaStatusParameter);
        }
    
        public virtual ObjectResult<GetStopsWithinProximity_Result> GetStopsWithinProximity(Nullable<double> originatingLatitude, Nullable<double> originatingLongitude, string unitOfMeasure, Nullable<double> distance, string routeName)
        {
            var originatingLatitudeParameter = originatingLatitude.HasValue ?
                new ObjectParameter("OriginatingLatitude", originatingLatitude) :
                new ObjectParameter("OriginatingLatitude", typeof(double));
    
            var originatingLongitudeParameter = originatingLongitude.HasValue ?
                new ObjectParameter("OriginatingLongitude", originatingLongitude) :
                new ObjectParameter("OriginatingLongitude", typeof(double));
    
            var unitOfMeasureParameter = unitOfMeasure != null ?
                new ObjectParameter("UnitOfMeasure", unitOfMeasure) :
                new ObjectParameter("UnitOfMeasure", typeof(string));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(double));
    
            var routeNameParameter = routeName != null ?
                new ObjectParameter("RouteName", routeName) :
                new ObjectParameter("RouteName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStopsWithinProximity_Result>("GetStopsWithinProximity", originatingLatitudeParameter, originatingLongitudeParameter, unitOfMeasureParameter, distanceParameter, routeNameParameter);
        }
    
        public virtual ObjectResult<GetRoutes_Result> GetRoutes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoutes_Result>("GetRoutes");
        }
    
        public virtual int AddBooking(string newBookingId, string addUserId)
        {
            var newBookingIdParameter = newBookingId != null ?
                new ObjectParameter("NewBookingId", newBookingId) :
                new ObjectParameter("NewBookingId", typeof(string));
    
            var addUserIdParameter = addUserId != null ?
                new ObjectParameter("AddUserId", addUserId) :
                new ObjectParameter("AddUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBooking", newBookingIdParameter, addUserIdParameter);
        }
    }
}
