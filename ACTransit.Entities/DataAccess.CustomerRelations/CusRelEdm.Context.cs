//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ACTransit.DataAccess.CustomerRelations
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using ACTransit.Entities.CustomerRelations;
    
    public partial class CusRelEntities : DbContext
    {
        public CusRelEntities()
            : base("name=CusRelEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AuthorizedUsers> AuthorizedUsers { get; set; }
        public virtual DbSet<tblAttachments> tblAttachments { get; set; }
        public virtual DbSet<tblContactHistory> tblContactHistory { get; set; }
        public virtual DbSet<tblContacts> tblContacts { get; set; }
        public virtual DbSet<tblCustomerComplaintCodes> tblCustomerComplaintCodes { get; set; }
        public virtual DbSet<tblCustomerReferenceCodes> tblCustomerReferenceCodes { get; set; }
        public virtual DbSet<tblIncidentUpdateHistory> tblIncidentUpdateHistory { get; set; }
        public virtual DbSet<tblResearchHistory> tblResearchHistory { get; set; }
        public virtual DbSet<tblUpdateLog> tblUpdateLog { get; set; }
        public virtual DbSet<EmplDW_Department> EmplDW_Department { get; set; }
        public virtual DbSet<EmplDW_Employees> EmplDW_Employees { get; set; }
        public virtual DbSet<tblLinkedContacts> tblLinkedContacts { get; set; }
        public virtual DbSet<Settings> Settings { get; set; }
        public virtual DbSet<tblAttachmentsTemp> tblAttachmentsTemp { get; set; }
        public virtual DbSet<tblViewHistory> tblViewHistory { get; set; }
    
        public virtual int addCustomerInternal(Nullable<int> feedBackId, string clerkId, string userId, string aDAComplaint, string titleVI, string contactSource, string priority, string firstName, string lastName, string addr1, string addr2, string custCity, string custState, string custZip, string homePhone, string workPhone, string cellPhone, string email, string respondVia, Nullable<System.DateTime> incidentDateTime, string vehNo, string route, string destination, string location, string incidentCity, string badge, string employeeDesc, string responseRequested, string division, string reasons, string forAction, string forInfos, string assignedTo, string contactStatus, string ticketStatus, string custComments, string updatedBy)
        {
            var feedBackIdParameter = feedBackId.HasValue ?
                new ObjectParameter("FeedBackId", feedBackId) :
                new ObjectParameter("FeedBackId", typeof(int));
    
            var clerkIdParameter = clerkId != null ?
                new ObjectParameter("ClerkId", clerkId) :
                new ObjectParameter("ClerkId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var aDAComplaintParameter = aDAComplaint != null ?
                new ObjectParameter("ADAComplaint", aDAComplaint) :
                new ObjectParameter("ADAComplaint", typeof(string));
    
            var titleVIParameter = titleVI != null ?
                new ObjectParameter("TitleVI", titleVI) :
                new ObjectParameter("TitleVI", typeof(string));
    
            var contactSourceParameter = contactSource != null ?
                new ObjectParameter("ContactSource", contactSource) :
                new ObjectParameter("ContactSource", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var addr2Parameter = addr2 != null ?
                new ObjectParameter("Addr2", addr2) :
                new ObjectParameter("Addr2", typeof(string));
    
            var custCityParameter = custCity != null ?
                new ObjectParameter("CustCity", custCity) :
                new ObjectParameter("CustCity", typeof(string));
    
            var custStateParameter = custState != null ?
                new ObjectParameter("CustState", custState) :
                new ObjectParameter("CustState", typeof(string));
    
            var custZipParameter = custZip != null ?
                new ObjectParameter("CustZip", custZip) :
                new ObjectParameter("CustZip", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var respondViaParameter = respondVia != null ?
                new ObjectParameter("RespondVia", respondVia) :
                new ObjectParameter("RespondVia", typeof(string));
    
            var incidentDateTimeParameter = incidentDateTime.HasValue ?
                new ObjectParameter("IncidentDateTime", incidentDateTime) :
                new ObjectParameter("IncidentDateTime", typeof(System.DateTime));
    
            var vehNoParameter = vehNo != null ?
                new ObjectParameter("VehNo", vehNo) :
                new ObjectParameter("VehNo", typeof(string));
    
            var routeParameter = route != null ?
                new ObjectParameter("Route", route) :
                new ObjectParameter("Route", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var incidentCityParameter = incidentCity != null ?
                new ObjectParameter("IncidentCity", incidentCity) :
                new ObjectParameter("IncidentCity", typeof(string));
    
            var badgeParameter = badge != null ?
                new ObjectParameter("Badge", badge) :
                new ObjectParameter("Badge", typeof(string));
    
            var employeeDescParameter = employeeDesc != null ?
                new ObjectParameter("EmployeeDesc", employeeDesc) :
                new ObjectParameter("EmployeeDesc", typeof(string));
    
            var responseRequestedParameter = responseRequested != null ?
                new ObjectParameter("ResponseRequested", responseRequested) :
                new ObjectParameter("ResponseRequested", typeof(string));
    
            var divisionParameter = division != null ?
                new ObjectParameter("Division", division) :
                new ObjectParameter("Division", typeof(string));
    
            var reasonsParameter = reasons != null ?
                new ObjectParameter("Reasons", reasons) :
                new ObjectParameter("Reasons", typeof(string));
    
            var forActionParameter = forAction != null ?
                new ObjectParameter("ForAction", forAction) :
                new ObjectParameter("ForAction", typeof(string));
    
            var forInfosParameter = forInfos != null ?
                new ObjectParameter("ForInfos", forInfos) :
                new ObjectParameter("ForInfos", typeof(string));
    
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var contactStatusParameter = contactStatus != null ?
                new ObjectParameter("ContactStatus", contactStatus) :
                new ObjectParameter("ContactStatus", typeof(string));
    
            var ticketStatusParameter = ticketStatus != null ?
                new ObjectParameter("TicketStatus", ticketStatus) :
                new ObjectParameter("TicketStatus", typeof(string));
    
            var custCommentsParameter = custComments != null ?
                new ObjectParameter("CustComments", custComments) :
                new ObjectParameter("CustComments", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addCustomerInternal", feedBackIdParameter, clerkIdParameter, userIdParameter, aDAComplaintParameter, titleVIParameter, contactSourceParameter, priorityParameter, firstNameParameter, lastNameParameter, addr1Parameter, addr2Parameter, custCityParameter, custStateParameter, custZipParameter, homePhoneParameter, workPhoneParameter, cellPhoneParameter, emailParameter, respondViaParameter, incidentDateTimeParameter, vehNoParameter, routeParameter, destinationParameter, locationParameter, incidentCityParameter, badgeParameter, employeeDescParameter, responseRequestedParameter, divisionParameter, reasonsParameter, forActionParameter, forInfosParameter, assignedToParameter, contactStatusParameter, ticketStatusParameter, custCommentsParameter, updatedByParameter);
        }
    
        public virtual int addCustomerContact(Nullable<int> feedbackId, string clerkId, string userId, string aDAComplaint, string titleVI, string contactSource, Nullable<System.DateTime> receivedDateTime, string priority, string firstName, string lastName, string addr1, string addr2, string custCity, string custState, string custZip, string homePhone, string workPhone, string faxPhone, string email, string respondVia, Nullable<System.DateTime> incidentDateTime, string vehNo, string route, string destination, string location, string badge, string employeeDesc, string responseRequested, string division, string reasons, string forAction, string forInfos, string assignedTo, string contactStatus, string ticketStatus, string custComments, string updatedBy, string lostItemCategory, string lostItemType, string fileBase64Data, string fileName, Nullable<int> fileSize, string fileContentType)
        {
            var feedbackIdParameter = feedbackId.HasValue ?
                new ObjectParameter("FeedbackId", feedbackId) :
                new ObjectParameter("FeedbackId", typeof(int));
    
            var clerkIdParameter = clerkId != null ?
                new ObjectParameter("ClerkId", clerkId) :
                new ObjectParameter("ClerkId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var aDAComplaintParameter = aDAComplaint != null ?
                new ObjectParameter("ADAComplaint", aDAComplaint) :
                new ObjectParameter("ADAComplaint", typeof(string));
    
            var titleVIParameter = titleVI != null ?
                new ObjectParameter("TitleVI", titleVI) :
                new ObjectParameter("TitleVI", typeof(string));
    
            var contactSourceParameter = contactSource != null ?
                new ObjectParameter("ContactSource", contactSource) :
                new ObjectParameter("ContactSource", typeof(string));
    
            var receivedDateTimeParameter = receivedDateTime.HasValue ?
                new ObjectParameter("ReceivedDateTime", receivedDateTime) :
                new ObjectParameter("ReceivedDateTime", typeof(System.DateTime));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var addr2Parameter = addr2 != null ?
                new ObjectParameter("Addr2", addr2) :
                new ObjectParameter("Addr2", typeof(string));
    
            var custCityParameter = custCity != null ?
                new ObjectParameter("CustCity", custCity) :
                new ObjectParameter("CustCity", typeof(string));
    
            var custStateParameter = custState != null ?
                new ObjectParameter("CustState", custState) :
                new ObjectParameter("CustState", typeof(string));
    
            var custZipParameter = custZip != null ?
                new ObjectParameter("CustZip", custZip) :
                new ObjectParameter("CustZip", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var faxPhoneParameter = faxPhone != null ?
                new ObjectParameter("FaxPhone", faxPhone) :
                new ObjectParameter("FaxPhone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var respondViaParameter = respondVia != null ?
                new ObjectParameter("RespondVia", respondVia) :
                new ObjectParameter("RespondVia", typeof(string));
    
            var incidentDateTimeParameter = incidentDateTime.HasValue ?
                new ObjectParameter("IncidentDateTime", incidentDateTime) :
                new ObjectParameter("IncidentDateTime", typeof(System.DateTime));
    
            var vehNoParameter = vehNo != null ?
                new ObjectParameter("VehNo", vehNo) :
                new ObjectParameter("VehNo", typeof(string));
    
            var routeParameter = route != null ?
                new ObjectParameter("Route", route) :
                new ObjectParameter("Route", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var badgeParameter = badge != null ?
                new ObjectParameter("Badge", badge) :
                new ObjectParameter("Badge", typeof(string));
    
            var employeeDescParameter = employeeDesc != null ?
                new ObjectParameter("EmployeeDesc", employeeDesc) :
                new ObjectParameter("EmployeeDesc", typeof(string));
    
            var responseRequestedParameter = responseRequested != null ?
                new ObjectParameter("ResponseRequested", responseRequested) :
                new ObjectParameter("ResponseRequested", typeof(string));
    
            var divisionParameter = division != null ?
                new ObjectParameter("Division", division) :
                new ObjectParameter("Division", typeof(string));
    
            var reasonsParameter = reasons != null ?
                new ObjectParameter("Reasons", reasons) :
                new ObjectParameter("Reasons", typeof(string));
    
            var forActionParameter = forAction != null ?
                new ObjectParameter("ForAction", forAction) :
                new ObjectParameter("ForAction", typeof(string));
    
            var forInfosParameter = forInfos != null ?
                new ObjectParameter("ForInfos", forInfos) :
                new ObjectParameter("ForInfos", typeof(string));
    
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var contactStatusParameter = contactStatus != null ?
                new ObjectParameter("ContactStatus", contactStatus) :
                new ObjectParameter("ContactStatus", typeof(string));
    
            var ticketStatusParameter = ticketStatus != null ?
                new ObjectParameter("TicketStatus", ticketStatus) :
                new ObjectParameter("TicketStatus", typeof(string));
    
            var custCommentsParameter = custComments != null ?
                new ObjectParameter("CustComments", custComments) :
                new ObjectParameter("CustComments", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var lostItemCategoryParameter = lostItemCategory != null ?
                new ObjectParameter("LostItemCategory", lostItemCategory) :
                new ObjectParameter("LostItemCategory", typeof(string));
    
            var lostItemTypeParameter = lostItemType != null ?
                new ObjectParameter("LostItemType", lostItemType) :
                new ObjectParameter("LostItemType", typeof(string));
    
            var fileBase64DataParameter = fileBase64Data != null ?
                new ObjectParameter("FileBase64Data", fileBase64Data) :
                new ObjectParameter("FileBase64Data", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileSizeParameter = fileSize.HasValue ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(int));
    
            var fileContentTypeParameter = fileContentType != null ?
                new ObjectParameter("FileContentType", fileContentType) :
                new ObjectParameter("FileContentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addCustomerContact", feedbackIdParameter, clerkIdParameter, userIdParameter, aDAComplaintParameter, titleVIParameter, contactSourceParameter, receivedDateTimeParameter, priorityParameter, firstNameParameter, lastNameParameter, addr1Parameter, addr2Parameter, custCityParameter, custStateParameter, custZipParameter, homePhoneParameter, workPhoneParameter, faxPhoneParameter, emailParameter, respondViaParameter, incidentDateTimeParameter, vehNoParameter, routeParameter, destinationParameter, locationParameter, badgeParameter, employeeDescParameter, responseRequestedParameter, divisionParameter, reasonsParameter, forActionParameter, forInfosParameter, assignedToParameter, contactStatusParameter, ticketStatusParameter, custCommentsParameter, updatedByParameter, lostItemCategoryParameter, lostItemTypeParameter, fileBase64DataParameter, fileNameParameter, fileSizeParameter, fileContentTypeParameter);
        }
    
        public virtual int CusrelOpenStats()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CusrelOpenStats");
        }
    
        public virtual int AddViewFile(Nullable<int> fileNum, string userId, Nullable<System.DateTime> dateView)
        {
            var fileNumParameter = fileNum.HasValue ?
                new ObjectParameter("FileNum", fileNum) :
                new ObjectParameter("FileNum", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var dateViewParameter = dateView.HasValue ?
                new ObjectParameter("DateView", dateView) :
                new ObjectParameter("DateView", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddViewFile", fileNumParameter, userIdParameter, dateViewParameter);
        }
    
        public virtual int TrackFileView(Nullable<int> fileNum, string userId, Nullable<System.DateTime> dateView)
        {
            var fileNumParameter = fileNum.HasValue ?
                new ObjectParameter("FileNum", fileNum) :
                new ObjectParameter("FileNum", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var dateViewParameter = dateView.HasValue ?
                new ObjectParameter("DateView", dateView) :
                new ObjectParameter("DateView", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TrackFileView", fileNumParameter, userIdParameter, dateViewParameter);
        }
    }
}
